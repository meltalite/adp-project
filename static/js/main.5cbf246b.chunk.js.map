{"version":3,"sources":["logo.svg","i18n.js","layouts/navigation/navigation-items.js","layouts/navigation/search-bar.js","layouts/navigation/navigation.js","layouts/footer/map.js","layouts/sections/sections.js","layouts/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","i18n","use","XHR","LanguageDetector","initReactI18next","init","fallbackLng","debug","interpolation","escapeValue","react","useSuspense","backend","loadPath","process","load","NavigationItems","goTo","text","SearchBar","searchNode","useRef","useEffect","current","addEventListener","keypressListener","removeEventListener","e","key","search","value","pattern","divs","document","getElementsByClassName","i","length","para","getElementsByTagName","innerText","indexOf","original","innerHTML","console","log","replacement","marked","replace","scrollIntoView","ref","type","id","placeholder","onClick","Navigation","useState","isOpen","setIsOpen","useTranslation","changeLanguage","lang","AdditionalNavItem","NavItem","Navbar","light","fixed","NavbarBrand","href","NavbarToggler","className","Collapse","navbar","Nav","justified","map","navItem","concat","Map","Sections","t","style","padding","borderBottom","item","index","Home","App","Loader","src","logo","alt","fallback","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,uQCK3CC,IACKC,IAAIC,KACJD,IAAIE,KACJF,IAAIG,KACJC,KAAK,CACFC,YAAa,KACbC,OAAO,EAEPC,cAAe,CACXC,aAAa,GAGjBC,MAAO,CACHC,aAAa,GAGjBC,QAAS,CACLC,SAAS,GAAD,OAAKC,eAAL,iCAEZC,KAAM,eAGCf,EAAf,E,MAAeA,I,gEC3BFgB,EAAkB,CAC3B,CAAEC,KAAM,WAAYC,KAAM,SAC1B,CAAED,KAAM,WAAYC,KAAM,YAC1B,CAAED,KAAM,WAAYC,KAAM,YAC1B,CAAED,KAAM,WAAYC,KAAM,WAC1B,CAAED,KAAM,WAAYC,KAAM,Y,MCFf,SAASC,IACtB,IAAMC,EAAaC,mBAEnBC,qBAAU,WAER,OADAF,EAAWG,QAAQC,iBAAiB,WAAYC,GACzC,WACLL,EAAWG,QAAQG,oBAAoB,WAAYD,MAEpD,IAEH,IAAMA,EAAmB,SAACE,GACV,UAAVA,EAAEC,KACJC,EAAOT,EAAWG,QAAQO,QAIxBD,EAAS,SAACX,GAId,IAHA,IAAMa,EAAUb,EAEZc,EAAOC,SAASC,uBAAuB,gBAClCC,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAAK,CACpC,IAAIE,EAAOL,EAAKG,GAAGG,qBAAqB,KAExC,IAAe,IADHD,EAAK,GAAGE,UAAUC,QAAQT,GACpB,CAChB,IAAMU,EAAWJ,EAAK,GAAGK,UACzBC,QAAQC,IAAIH,GACZ,IAAMI,EAAW,gDAA4Cd,EAA5C,WACXe,EAASL,EAASM,QAAQhB,EAASc,GACzCF,QAAQC,IAAIC,GACZR,EAAK,GAAGK,UAAYI,EACpBd,EAAKG,GAAGa,iBACR,SASN,OACE,oCACE,2BACEC,IAAK7B,EACL8B,KAAK,OACLC,GAAG,aACHC,YAAY,gCAEd,4BAAQD,GAAG,2BAA2BE,QAZtB,WAClBjC,EAAWG,QAAQO,MAAQ,KAWzB,MC5CS,SAASwB,IAAc,IAAD,EACPC,oBAAS,GADF,mBAC5BC,EAD4B,KACpBC,EADoB,KAG3BzD,EAAS0D,cAAT1D,KAEF2D,EAAiB,SAACC,GACtB5D,EAAK2D,eAAeC,IAGhBC,EAAoB,WACxB,OACE,oCACE,kBAACC,EAAA,EAAD,CAASlC,IAAI,cACX,kBAACT,EAAD,CAAWS,IAAI,eACf,4BAAQA,IAAI,KAAKyB,QAAS,kBAAMM,EAAe,QAA/C,4BACA,4BAAQ/B,IAAI,KAAKyB,QAAS,kBAAMM,EAAe,QAA/C,4BACA,4BAAQ/B,IAAI,KAAKyB,QAAS,kBAAMM,EAAe,QAA/C,+BAKR,OACE,oCACE,kBAACI,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,OAClB,kBAACC,EAAA,EAAD,CAAaC,KAAK,KAAlB,OACA,kBAACC,EAAA,EAAD,CAAeC,UAAU,gCAAgChB,QAvBhD,kBAAMI,GAAWD,MAwB1B,kBAACc,EAAA,EAAD,CAAUd,OAAQA,EAAQe,QAAM,EAACF,UAAU,aACzC,kBAACG,EAAA,EAAD,CAAKrB,GAAG,eAAekB,UAAU,6BAA6BI,WAAS,GAEnEzD,EAAgB0D,KAAI,SAAAC,GAAO,OACzB,kBAACb,EAAA,EAAD,CAASlC,IAAK+C,EAAQ1D,KAAMoD,UAAU,oCACpC,uBAAGF,KAAI,WAAMQ,EAAQ1D,OAAS0D,EAAQzD,UAEvC0D,OAAOf,OAIhB,kBAACW,EAAA,EAAD,CAAKrB,GAAG,gBAAgBkB,UAAU,6BAE9BrD,EAAgB0D,KAAI,SAAAC,GAAO,OACzB,kBAACb,EAAA,EAAD,CAASlC,IAAK+C,EAAQ1D,KAAMoD,UAAU,mCACpC,uBAAGF,KAAI,WAAMQ,EAAQ1D,OAAS0D,EAAQzD,UAEvC0D,OAAOf,Q,MC/CP,SAASgB,IACpB,OACI,yBAAKR,UAAU,OACX,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,yBCHZ,SAASS,IAAY,IAC1BC,EAAMrB,cAANqB,EACFC,EAAQ,CACZC,QAAS,qBACTC,aAAc,qBAEhB,OACElE,EAAgB0D,KAAI,SAACS,EAAMC,GAAP,OAClB,6BAASxD,IAAKuD,EAAKlE,KAAMkC,GAAIgC,EAAKlE,KAAM+D,MAAOA,EAAOX,UAAU,gBAC9D,yBAAKzC,IAAKuD,EAAKlE,KAAMoD,UAAU,OAC7B,yBAAKzC,IAAKuD,EAAKlE,KAAMoD,UAAU,UAC7B,wBAAIA,UAAU,mBAAd,IAAkCc,EAAKjE,KAAvC,KACA,4BAAK6D,EAAE,iBACP,2BAAIA,EAAE,yBCZH,SAASM,IACpB,OACI,oCACI,kBAAC/B,EAAD,MACA,kBAACwB,EAAD,MACA,kBAACD,EAAD,O,qBCYGS,MAjBf,WACE,IAAMC,EAAS,WACb,OACE,yBAAKlB,UAAU,OACb,yBAAKmB,IAAKC,IAAMpB,UAAU,WAAWqB,IAAI,SACzC,6CAKN,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAACJ,EAAD,OAClB,kBAACF,EAAD,QCLcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASjE,SAASkE,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhE,QAAQgE,MAAMA,EAAMC,c","file":"static/js/main.5cbf246b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from 'react-i18next';\nimport XHR from \"i18next-xhr-backend\";\n\ni18n\n    .use(XHR)\n    .use(LanguageDetector)\n    .use(initReactI18next)\n    .init({\n        fallbackLng: \"en\",\n        debug: false,\n\n        interpolation: {\n            escapeValue: false,\n        },\n\n        react: {\n            useSuspense: true,\n        },\n\n        backend: {\n            loadPath: `${process.env.PUBLIC_URL}/locales/{{lng}}/{{ns}}.json`\n        },\n        load: 'unspecific',\n    });\n\nexport default i18n;","export const NavigationItems = [\n    { goTo: 'section1', text: 'About' },\n    { goTo: 'section2', text: 'Products' },\n    { goTo: 'section3', text: 'Services' },\n    { goTo: 'section4', text: 'Members' },\n    { goTo: 'section5', text: 'Contact' },\n]","import React, { useState, useRef, useEffect } from 'react';\nimport './search-bar.scss'\n\nexport default function SearchBar() {\n  const searchNode = useRef()\n\n  useEffect(() => {\n    searchNode.current.addEventListener('keypress', keypressListener)\n    return () => {\n      searchNode.current.removeEventListener('keypress', keypressListener)\n    }\n  }, [])\n\n  const keypressListener = (e) => {\n    if (e.key === 'Enter') {\n      search(searchNode.current.value)\n    }\n  }\n\n  const search = (text) => {\n    const pattern = text\n\n    var divs = document.getElementsByClassName(\"page-section\");\n    for (var i = 0; i < divs.length; i++) {\n      var para = divs[i].getElementsByTagName(\"p\");\n      var index = para[0].innerText.indexOf(pattern);\n      if (index !== -1) {\n        const original = para[0].innerHTML;\n        console.log(original)\n        const replacement = `<span style=\"background-color:yellow\">${pattern}</span>`\n        const marked = original.replace(pattern, replacement)\n        console.log(replacement)\n        para[0].innerHTML = marked\n        divs[i].scrollIntoView()\n        break;\n      }\n    }\n  }\n\n  const clearSearch = () => {\n    searchNode.current.value = ''\n  }\n\n  return (\n    <>\n      <input\n        ref={searchNode}\n        type=\"text\"\n        id=\"search-bar\"\n        placeholder=\"&#128269; Search Text...\"\n      />\n      <button id=\"search-bar__clear-button\" onClick={clearSearch}>x</button>\n    </>\n  )\n}","import React, { useState } from 'react';\nimport './navigation.scss'\nimport { Navbar, Nav, NavItem, NavbarBrand, NavbarToggler, Collapse } from 'reactstrap';\nimport { NavigationItems } from './navigation-items';\nimport { useTranslation } from 'react-i18next'\nimport SearchBar from './search-bar';\n\nexport default function Navigation() {\n  const [isOpen, setIsOpen] = useState(false)\n  const toggle = () => setIsOpen(!isOpen)\n  const { i18n } = useTranslation()\n\n  const changeLanguage = (lang) => {\n    i18n.changeLanguage(lang)\n  }\n\n  const AdditionalNavItem = () => {\n    return (\n      <>\n        <NavItem key='additional' >\n          <SearchBar key='search-bar' />\n          <button key='en' onClick={() => changeLanguage('en')} >ðŸ‡¬ðŸ‡§</button>\n          <button key='jp' onClick={() => changeLanguage('jp')} >ðŸ‡¯ðŸ‡µ</button>\n          <button key='ch' onClick={() => changeLanguage('ch')} >ðŸ‡¨ðŸ‡³</button>\n        </NavItem>\n      </>\n    )\n  }\n  return (\n    <>\n      <Navbar light fixed='top'>\n        <NavbarBrand href='#'>ADP</NavbarBrand>\n        <NavbarToggler className='nav-toggler d-block d-md-none' onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar className='d-md-none' >\n          <Nav id='navbarMobile' className='main-nav d-block d-md-none' justified>\n            {\n              NavigationItems.map(navItem => (\n                <NavItem key={navItem.goTo} className='d-block d-md-none text-uppercase'>\n                  <a href={`#${navItem.goTo}`}>{navItem.text}</a>\n                </NavItem>\n              )).concat(AdditionalNavItem())\n            }\n          </Nav>\n        </Collapse>\n        <Nav id='navbarDesktop' className='main-nav d-none d-md-flex' >\n          {\n            NavigationItems.map(navItem => (\n              <NavItem key={navItem.goTo} className='d-none d-md-flex text-uppercase'>\n                <a href={`#${navItem.goTo}`}>{navItem.text}</a>\n              </NavItem>\n            )).concat(AdditionalNavItem())\n          }\n        </Nav>\n      </Navbar>\n    </>\n  )\n}","import React from 'react';\nimport './map.scss';\n\nexport default function Map() {\n    return (\n        <div className=\"row\" >\n            <div className=\"col-0 col-md-6\" ></div>\n            <div className=\"map col-12 col-md-6\" ></div>\n        </div>\n    )\n}","import React from 'react'\nimport { NavigationItems } from '../navigation/navigation-items'\nimport { useTranslation } from 'react-i18next';\n\nexport default function Sections() {\n  const { t } = useTranslation();\n  const style = {\n    padding: '70px 20px 0px 20px',\n    borderBottom: '1px dashed purple'\n  }\n  return (\n    NavigationItems.map((item, index) => (\n      <section key={item.goTo} id={item.goTo} style={style} className='page-section'>\n        <div key={item.goTo} className=\"row\" >\n          <div key={item.goTo} className=\"col-12\" >\n            <h2 className='section-heading'> {item.text} </h2>\n            <h1>{t('Lipsum.title')}</h1>\n            <p>{t('Lipsum.content')}</p>\n          </div>\n        </div>\n      </section>\n    ))\n  )\n}","import React from 'react';\nimport Navigation from \"./navigation/navigation\";\nimport Map from './footer/map';\nimport Sections from './sections/sections';\n\nexport default function Home() {\n    return (\n        <>\n            <Navigation />\n            <Sections />\n            <Map />\n        </>\n    )\n}","import React, { Suspense } from 'react';\nimport './App.css';\nimport Home from './layouts/home';\nimport logo from './logo.svg'\n\nfunction App() {\n  const Loader = () => {\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>loading...</div>\n      </div>\n    )\n  }\n\n  return (\n    <Suspense fallback={<Loader />}>\n      <Home/>\n    </Suspense>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './i18n';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}